{"version":3,"sources":["Game02/data/State.js","Game02/data/_utils/constants.js","Game02/data/context.js","Game02/data/reducer.js","Game02/Body/helpers.js","Game02/Body/hooks.js","Game02/Header/Timer/index.js","Game02/Header/index.js","Game02/Body/SandwichesPerSecondTracker/index.js","Game02/Body/SandwichButton/index.js","Game02/Body/ArmsUpgrader/ProgressBar/index.js","Game02/Body/ArmsUpgrader/index.js","Game02/Body/SandwichMenu/MenuItem/index.js","Game02/Body/SandwichMenu/index.js","Game02/Body/AchievementAnnouncer/achievements.js","Game02/Body/AchievementAnnouncer/index.js","Game02/Body/index.js","Game02/Footer/index.js","Game02/index.js","App.js","serviceWorker.js","index.js"],"names":["DefaultState","peopleCount","isGameActive","playerLevel","sandwichesPerSecond","autoPlayerLevelActive","menuItems","Bread","level","unlocked","Condiments","Cheese","Vegetables","Meat","Actions","Menu","BREAD","CONDIMENTS","CHEESE","VEGETABLES","MEAT","MenuMultipliers","Context","createContext","reducer","state","action","type","payload","itemName","saveState","JSON","stringify","window","localStorage","setItem","convertToFloat","number","accuracy","Number","parseFloat","toFixed","calculateScalePrice","baseCost","multiplier","unitCount","Math","pow","calculateScalePriceFloat","numberWithCommas","toString","replace","useThreshold","useState","threshold","setThreshold","useContext","useEffect","useCurrentSandwichCount","currentValue","setCurrentValue","useSandwichesPerSecondRate","setsandwichesPerSecond","sandwichLevel","items","Object","keys","map","key","forEach","item","menuItem","toUpperCase","getSandwichLevel","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","usePlayerLevel","useIsGameActive","getPlural","pluralForm","Timer","seconds","setSeconds","minutes","setMinutes","hours","setHours","second","minute","Header","flooredCount","floor","document","title","SandwichesPerSecondTracker","SandwichButton","dispatch","SECOND","useAutoSandwichMaker","onClick","ProgressBar","maxValue","valueName","max","value","ArmsUpgrader","showButton","setShowButton","useAutoPlayerLevelUpdate","disabled","STATES","MenuItem","cooldownTime","setState","tick","setTick","timer","setTimeout","clearTimeout","COOLDOWN_TIMES","UNLOCK_LEVEL","LockedItem","levelsRemaining","SandwichMenu","name","itemInState","achievements","taskCompleted","text","AchievementAnnouncer","sandwichCount","achievement","createAchievementList","Body","showMenu","setshowMenu","currentSandwichCount","Footer","Game02","useReducer","savedState","getItem","parse","Provider","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e15aae34.chunk.js","sourcesContent":["const DefaultState = {\n  peopleCount: 7700000000, // World population, approximately\n  isGameActive: true,\n  playerLevel: 0,\n  sandwichesPerSecond: 0,\n  autoPlayerLevelActive: false,\n  menuItems: {\n    Bread: {\n      level: 0,\n      unlocked: false,\n    },\n    Condiments: {\n      level: 0,\n      unlocked: false,\n    },\n    Cheese: {\n      level: 0,\n      unlocked: false,\n    },\n    Vegetables: {\n      level: 0,\n      unlocked: false,\n    },\n    Meat: {\n      level: 0,\n      unlocked: false,\n    },\n  },\n};\n\nexport default DefaultState;","export const Actions = {\n  MAKE_SANDWICH: 'MAKE_SANDWICH',\n  UP_PLAYER_LEVEL: 'UP_PLAYER_LEVEL',\n  UPGRADE_MENU_ITEM: 'UPGRADE_MENU_ITEM',\n  ACTIVATE_AUTO_ARMS: 'ACTIVATE_AUTO_ARMS',\n  LOAD_GAME: 'LOAD_GAME',\n  SAVE_GAME: 'SAVE_GAME',\n  RESET_GAME: 'RESET_GAME',\n};\n\nexport const Menu = {\n  BREAD: 'Bread',\n  CONDIMENTS: 'Condiments',\n  CHEESE: 'Cheese',\n  VEGETABLES: 'Vegetables',\n  MEAT: 'Meat',\n};\n\nexport const MenuMultipliers = {\n  BREAD: 1.15,\n  CONDIMENTS: 1.25,\n  CHEESE: 1.75,\n  VEGETABLES: 2.75,\n  MEAT: 4.75,\n};\n\nexport const MAX_NUMBER = 7700000000;\n\nconst SECOND = 1000;\nexport const INTERVAL_TIME = 10;\nexport const PER_SECOND_DIVISOR = SECOND/INTERVAL_TIME;\nexport const FLOATING_POINT = 0;\nexport const SANDWICH_MULTIPLIER = 1.15;\nexport const BASE_PROGRESS_BAR_THRESHOLD = 20;\nexport const THRESHOLD_MULTIPLIER = 2;","import { createContext } from 'react';\n\nconst Context = createContext();\n\nexport default Context;\n","import { Actions } from './_utils/constants';\nimport DefaultState from './State';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case Actions.MAKE_SANDWICH:\n      if (state.peopleCount - action.payload <= 0) {\n        return {\n          ...state,\n          isGameActive: false,\n          peopleCount: 0,\n        }\n      }\n      return {\n        ...state,\n        peopleCount: state.peopleCount -= (action.payload || 1),\n      };\n      \n    case Actions.UP_PLAYER_LEVEL:\n      return {\n        ...state,\n        playerLevel: state.playerLevel += action.payload,\n      };\n\n    case Actions.UPGRADE_MENU_ITEM:\n      return {\n        ...state,\n        menuItems: {\n          ...state.menuItems,\n          [action.itemName]: {\n            ...state.menuItems[action.itemName],\n            level: state.menuItems[action.itemName].level += action.payload,\n          },\n        },\n      };\n\n    case Actions.ACTIVATE_AUTO_ARMS:\n      return {\n        ...state,\n        autoPlayerLevelActive: true,\n      }\n\n    case Actions.LOAD_GAME:\n      return {\n        ...state,\n        ...action.payload,\n      }\n\n    case Actions.SAVE_GAME:\n      const saveState = JSON.stringify(state);\n      window.localStorage.setItem('sandwich-game', saveState);\n      return state;\n\n    case Actions.RESET_GAME:\n      return {\n        ...state,\n        ...DefaultState,\n        menuItems: {\n          ...DefaultState.menuItems,\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","export const convertToFloat = (number = 0, accuracy = 2) => Number.parseFloat(number).toFixed(accuracy);\n  \nexport const calculateScalePrice = (baseCost = 0, multiplier = 0, unitCount = 0) => {\n  return unitCount ? baseCost + Math.pow(multiplier, unitCount) : baseCost;\n}\n\nexport const calculateScalePriceFloat = (baseCost = 0, multiplier = 0, unitCount = 0, accuracy = 2) => {\n  return convertToFloat(calculateScalePrice(baseCost, multiplier, unitCount), accuracy);\n}\n\nexport const numberWithCommas = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import { useState, useContext, useEffect, useRef } from 'react';\nimport Context from '../data/context';\nimport { MAX_NUMBER, Actions, Menu, MenuMultipliers, INTERVAL_TIME, PER_SECOND_DIVISOR, FLOATING_POINT, SANDWICH_MULTIPLIER, BASE_PROGRESS_BAR_THRESHOLD, THRESHOLD_MULTIPLIER } from '../data/_utils/constants';\nimport { calculateScalePriceFloat } from './helpers';\n\n\nexport const useThreshold = () => {\n  const [threshold, setThreshold] = useState(BASE_PROGRESS_BAR_THRESHOLD);\n  const [state] = useContext(Context);\n\n  useEffect(() => {\n    setThreshold(calculateScalePriceFloat(BASE_PROGRESS_BAR_THRESHOLD, THRESHOLD_MULTIPLIER, state.playerLevel, FLOATING_POINT));\n  }, [state.playerLevel]);\n\n  return threshold;\n};\n\nexport const useCurrentSandwichCount = () => {\n  const [currentValue, setCurrentValue] = useState(0);\n  const [state] = useContext(Context);\n\n  useEffect(() => {\n    setCurrentValue(MAX_NUMBER - state.peopleCount);\n  }, [state.peopleCount]);\n\n  return currentValue;\n};\n\nexport const useAutoPlayerLevelUpdate = () => {\n  const threshold = useThreshold();\n  const currentValue = useCurrentSandwichCount();\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    if (state.autoPlayerLevelActive && currentValue >= threshold) {\n      dispatch({ type: Actions.UP_PLAYER_LEVEL, payload: 1 });\n    }\n  }, [state.autoPlayerLevelActive, currentValue, threshold, dispatch]);\n};\n\nexport const useSandwichesPerSecondRate = () => {\n  const [sandwichesPerSecond, setsandwichesPerSecond] = useState(0);\n  const [state] = useContext(Context);\n\n  const getSandwichLevel = () => {\n    const items = Object.keys(Menu).map(key => Menu[key]);\n    let level = 0;\n    items.forEach(item => {\n      const menuItem = state.menuItems[item];\n      level += (menuItem.level * MenuMultipliers[item.toUpperCase()]);\n    })\n    return level;\n  }\n\n  const sandwichLevel = getSandwichLevel();\n  const { playerLevel } = state;\n\n  useEffect(() => {\n    const calculateSandwichesPerSecond = (sandwich, player) => {\n      return calculateScalePriceFloat(player, SANDWICH_MULTIPLIER, sandwich, FLOATING_POINT);\n      // return calculateScalePriceFloat(sandwich, 1.15, player, 0);\n    };\n\n    setsandwichesPerSecond(calculateSandwichesPerSecond(sandwichLevel, playerLevel))\n  }, [sandwichLevel, playerLevel]);\n\n  return sandwichesPerSecond;\n};\n\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport const useAutoSandwichMaker = () => {\n  const [, dispatch] = useContext(Context);\n  const sandwichesPerSecond = useSandwichesPerSecondRate();\n  const isGameActive = useIsGameActive();\n\n  useInterval(() => {\n    if (sandwichesPerSecond > 0 && isGameActive) {\n      dispatch({ type: Actions.MAKE_SANDWICH, payload: sandwichesPerSecond/PER_SECOND_DIVISOR });\n    }\n  }, INTERVAL_TIME);\n};\n\nexport const usePlayerLevel = () => {\n  const [state] = useContext(Context);\n  return state.playerLevel;\n}\n\nexport const useIsGameActive = () => {\n  const [state] = useContext(Context);\n  return state.isGameActive;\n}","import React, { useState } from 'react';\nimport { useInterval, useIsGameActive } from '../../Body/hooks';\n\nconst getPlural = (number = 0, pluralForm = 's') => `${number === 1 ? '' : pluralForm}`;\n\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [hours, setHours] = useState(0);\n  const isGameActive = useIsGameActive();\n\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n\n  useInterval(() => {\n    if (isGameActive) {\n      setSeconds((seconds + 1) % 60);\n    }\n  }, second);\n\n  useInterval(() => {\n    if (isGameActive) {\n      setMinutes((minutes + 1) % 60);\n    }\n  }, minute);\n\n  useInterval(() => {\n    if (isGameActive) {\n      setHours(hours + 1);\n    }\n  }, hour);\n\n  return (\n    <p>Time taken: {`${hours} hour${getPlural(hours)}, ${minutes} minute${getPlural(minutes)} and ${seconds} second${getPlural(seconds)}.`}</p>\n  );\n};\n\nexport default Timer;","import React, { useContext, useEffect } from 'react';\nimport Timer from './Timer';\nimport Context from '../data/context';\nimport { numberWithCommas } from '../Body/helpers';\n\nconst Header = () => {\n  const [state] = useContext(Context);\n  const { peopleCount } = state;\n  const flooredCount = Math.floor(peopleCount);\n\n  useEffect(() => {\n    document.title = `${numberWithCommas(flooredCount)} people without a sandwich - how to make a sandwich`;\n  }, [flooredCount])\n\n  return (\n    <header>\n      <h1>how to make a sandwich</h1>\n      <p>Goal: Make a sandwich for everyone. <strong>Literally</strong>.</p>\n      <Timer />\n      <p>People without a sandwich: <span id=\"peopleLeft\">{numberWithCommas(flooredCount)}</span></p>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { useSandwichesPerSecondRate, usePlayerLevel } from '../hooks';\nimport { numberWithCommas } from '../helpers'\n\nconst SandwichesPerSecondTracker = () => {\n  return (\n    <>\n    <p>Sandwiches made per second: {numberWithCommas(useSandwichesPerSecondRate())}</p>\n    <p>Number of extra hands: {numberWithCommas(usePlayerLevel())}</p>\n    </>\n  );\n}\n\nexport default SandwichesPerSecondTracker;","import React, { useContext } from 'react';\nimport Context from '../../data/context';\nimport { Actions } from '../../data/_utils/constants';\nimport { useAutoSandwichMaker } from '../hooks';\n\nconst SandwichButton = () => {\n  const [, dispatch] = useContext(Context);\n  useAutoSandwichMaker();\n  return (\n    <section>\n      <button onClick={() => dispatch({ type: Actions.MAKE_SANDWICH })}>make a sandwich</button>\n    </section>\n  );\n}\n\nexport default SandwichButton;","import React from 'react';\n\nconst ProgressBar = ({ currentValue, maxValue, valueName }) => <progress max={maxValue} value={currentValue}>{`${valueName}: ${currentValue}`}</progress>\n\nexport default ProgressBar;","import React, { useContext, useState, useEffect } from 'react';\nimport ProgressBar from './ProgressBar';\nimport { useThreshold, useCurrentSandwichCount, useAutoPlayerLevelUpdate, usePlayerLevel } from '../hooks';\nimport Context from '../../data/context';\nimport { Actions, BASE_PROGRESS_BAR_THRESHOLD } from '../../data/_utils/constants';\n\nconst ArmsUpgrader = () => {\n  const [state, dispatch] = useContext(Context);\n  const [showButton, setShowButton] = useState(false);\n\n  const threshold = useThreshold();\n  const currentValue = useCurrentSandwichCount();\n  const playerLevel = usePlayerLevel();\n\n  // Auto \"Ask for Help\"\n  useAutoPlayerLevelUpdate();\n\n  useEffect(() => {\n    if (currentValue >= BASE_PROGRESS_BAR_THRESHOLD) {\n      setShowButton(true);\n    } else {\n      setShowButton(false);\n    }\n  }, [currentValue]);\n\n  return (\n    <section>\n      {showButton && <button disabled={currentValue < threshold} onClick={() => {\n        dispatch({ type: Actions.UP_PLAYER_LEVEL, payload: 1 });\n        if (playerLevel >= 10 && !state.autoPlayerLevelActive) {\n          dispatch({ type: Actions.ACTIVATE_AUTO_ARMS });\n        }\n      }}>{playerLevel >= 10 && !state.autoPlayerLevelActive ? \"Drink 'Automatic Arms Growth Potion'\" : 'Grow more hands!'}</button>}\n      <ProgressBar maxValue={threshold} currentValue={currentValue} valueName=\"Sandwich Count\" />\n    </section>\n  );\n}\n\nexport default ArmsUpgrader;","import React, { useContext, useState, useEffect } from 'react';\nimport ProgressBar from '../../ArmsUpgrader/ProgressBar';\nimport Context from '../../../data/context';\nimport { Actions } from '../../../data/_utils/constants';\nimport { useInterval } from '../../hooks';\n\nconst STATES = {\n  IDLE: 'idle',\n  COOLDOWN: 'cooldown',\n};\n\nconst MenuItem = ({ itemName, cooldownTime }) => {\n  const [, dispatch] = useContext(Context);\n  const [state, setState] = useState(STATES.IDLE);\n  const [tick, setTick] = useState(0);\n\n  // https://upmostly.com/tutorials/settimeout-in-react-components-using-hooks\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setState(STATES.IDLE);\n    }, cooldownTime);\n    return () => clearTimeout(timer);\n  }, [cooldownTime, state]);\n\n  useInterval(() => {\n      setTick(tick + 1000)\n  }, 1000);\n\n  useInterval(() => {\n    if (state === STATES.IDLE) {\n      setTick(0)\n    }\n  }, 10);\n\n  return (\n    <li>\n      <button disabled={state === STATES.COOLDOWN} onClick={() => {\n        dispatch({ type: Actions.UPGRADE_MENU_ITEM, payload: 1, itemName });\n        setState(STATES.COOLDOWN);\n      }}>\n        {state === STATES.COOLDOWN && `Getting better ${itemName}...`}\n        {state === STATES.IDLE && `Upgrade ${itemName}`}\n      </button>\n      <ProgressBar maxValue={cooldownTime || 1} currentValue={tick} valueName={`${itemName} Progress`} />\n    </li>\n  );\n};\n\nexport default MenuItem;","import React, { useContext } from 'react';\nimport Context from '../../data/context';\nimport MenuItem from './MenuItem';\nimport { Menu } from '../../data/_utils/constants'\n\nconst COOLDOWN_TIMES = {\n  Bread: 2000,\n  Condiments: 5000,\n  Cheese: 8000,\n  Vegetables: 12000,\n  Meat: 20000,\n}\n\nconst UNLOCK_LEVEL = {\n  Bread: 0,\n  Condiments: 7,\n  Cheese: 14,\n  Vegetables: 21,\n  Meat: 28,\n}\n\nconst SandwichMenu = () => {\n  const [state] = useContext(Context);\n  const { playerLevel } = state;\n  return (\n    <section>\n      <h2>Sandwich</h2>\n      <p>Upgrade parts of your sandwich to make <em>more</em> sandwiches per second.</p>\n      <ol>\n        {Object.keys(Menu).map(name => {\n          const item = Menu[name];\n          const itemInState = state.menuItems[item]\n          if (playerLevel < UNLOCK_LEVEL[item]) return <LockedItem key={`locked-${item}`} itemName={item} levelsRemaining={UNLOCK_LEVEL[item] - playerLevel} />;\n          return (\n            <MenuItem cooldownTime={COOLDOWN_TIMES[item] * (1.15 * itemInState.level)} key={`SandwichMenu_${item}`} itemName={item} />\n          );\n        })}\n      </ol>\n    </section>\n  );\n};\n\nconst LockedItem = ({ levelsRemaining, itemName }) => <li><button disabled={true}>{`You need ${levelsRemaining} more hand(s) to unlock ${itemName}`}</button></li>;\n\nexport default SandwichMenu;","const achievements = [\n  {\n    taskCompleted: state => state.playerLevel >= 1,\n    text: \"Always good to have an extra set of hands.\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 5,\n    text: \"Sure, why not 5 more hands? The more the merrier!\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 10,\n    text: \"Okay buddy. 10 extra hands seem excessive.\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 15,\n    text: \"You must really like making sandwiches, with those 15 extra hands.\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 20,\n    text: \"Hello, police? There's a many-handed monster here. How many hands? 20 extra!\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 50,\n    text: \"Ever read Frankenstein? Mary Shelley may have some thoughts on your 50 hands.\",\n  },\n  {\n    taskCompleted: state => state.playerLevel >= 100,\n    text: \"100 hands. Aight, imma head out.\",\n  },\n  {\n    threshold: 10,\n    text: '10 Sandwiches! Strong start.'\n  },\n  {\n    threshold: 100,\n    text: '100 Sandwiches! Getting there.'\n  },\n  {\n    threshold: 1000,\n    text: '1000 Sandwiches! Looking good, champ.'\n  },\n  {\n    threshold: 10000,\n    text: '10000 Sandwiches! Yep. Still going!'\n  },\n  {\n    threshold: 100000,\n    text: '100000 Sandwiches! Getting tired?'\n  },\n  {\n    threshold: 1000000,\n    text: '1 Million Sandwiches! The Big 7 Figures!'\n  },\n  {\n    threshold: 10000000,\n    text: \"10 Million Sandwiches! If I had a dollar for every sandwich you've made...\"\n  },\n  {\n    threshold: 100000000,\n    text: '100 Million Sandwiches! Good golly!'\n  },\n  {\n    threshold: 1000000000,\n    text: '1 Billion Sandwiches! Great. About 8 more of these to go.'\n  },\n  {\n    threshold: 3850000000,\n    text: '3.85 Billion Sandwiches! Halfway there!'\n  },\n  {\n    threshold: 7700000000,\n    text: \"You've done it: 7.7 Billion sandwiches. World Hunger is no more!\"\n  },\n];\n\nexport default achievements;","import React, { useContext } from 'react';\nimport achievements from './achievements';\nimport Context from '../../data/context';\nimport { MAX_NUMBER } from '../../data/_utils/constants';\n\nconst createAchievementList = (sandwichCount, state) => {\n  return achievements.map(achievement => {\n    if (achievement.threshold && achievement.threshold > sandwichCount) return null;\n    if (achievement.taskCompleted && !achievement.taskCompleted(state)) return null;\n    return (\n      <li key={achievement.text}>{achievement.text}</li>\n    );\n  });\n}\n\nconst AchievementAnnouncer = () => {\n  const [state] = useContext(Context);\n  const { peopleCount } = state;\n  const sandwichCount = MAX_NUMBER - peopleCount;\n\n  return (\n    <section>\n      <h2>Achievements</h2>\n      <p>Here's a running list of what you've achieved so far.</p>\n      <ul>\n        {createAchievementList(sandwichCount, state)}\n      </ul>\n    </section>\n  );\n}\n\nexport default AchievementAnnouncer;","import React, { useState, useEffect } from 'react';\nimport SandwichesPerSecondTracker from './SandwichesPerSecondTracker';\nimport SandwichButton from './SandwichButton';\nimport ArmsUpgrader from './ArmsUpgrader';\nimport SandwichMenu from './SandwichMenu';\nimport AchievementAnnouncer from './AchievementAnnouncer';\nimport { useCurrentSandwichCount, usePlayerLevel } from './hooks';\n\nconst Body = () => {\n  const [showMenu, setshowMenu] = useState(false);\n  const currentSandwichCount = useCurrentSandwichCount();\n  const playerLevel = usePlayerLevel();\n\n  useEffect(() => {\n    if (currentSandwichCount >= 100 || playerLevel >= 5) {\n      setshowMenu(true);\n    } else {\n      setshowMenu(false);\n    }\n  }, [currentSandwichCount, playerLevel])\n\n  return (\n    <>\n      <SandwichesPerSecondTracker />\n      <SandwichButton />\n      <ArmsUpgrader />\n      {showMenu && <SandwichMenu />}\n      <AchievementAnnouncer />\n    </>\n  );\n}\n\nexport default Body;","import React, { useContext } from 'react';\nimport Context from '../data/context';\nimport { Actions } from '../data/_utils/constants';\n\nconst Footer = () => {\n  const [state, dispatch] = useContext(Context);\n  return (\n    <footer>\n      <button onClick={() => dispatch({ type: Actions.SAVE_GAME, payload: JSON.stringify(state) })}>Save Game</button>\n      <button onClick={() => dispatch({ type: Actions.RESET_GAME })}>Reset Game</button>\n    </footer>\n  )\n};\n\nexport default Footer;","import React, { useReducer, useEffect } from 'react';\nimport DefaultState from './data/State';\nimport { Actions } from './data/_utils/constants';\nimport Context from './data/context';\nimport reducer from './data/reducer';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport { useInterval } from './Body/hooks';\n\nconst GAME_KEY = 'sandwich-game';\n\nconst Game02 = () => {\n  const [state, dispatch] = useReducer(reducer, DefaultState);\n\n  useInterval(() => {\n    const saveState = JSON.stringify(state);\n    window.localStorage.setItem(GAME_KEY, saveState);\n  }, 10000);\n\n  useEffect(() => {\n    const savedState = window.localStorage.getItem(GAME_KEY);\n    if (savedState) {\n      dispatch({ type: Actions.LOAD_GAME, payload: JSON.parse(savedState) });\n    }\n  }, []);\n\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      <Header />\n      <Body />\n      <Footer />\n    </Context.Provider>\n  );\n};\n\nexport default Game02;","import React from 'react';\n// import Game from './Game';\nimport Game02 from './Game02';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game02 />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}